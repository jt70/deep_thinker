// automatically generated by the FlatBuffers compiler, do not modify

package org.deep_thinker.model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class DQNConfigFlat extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static DQNConfigFlat getRootAsDQNConfigFlat(ByteBuffer _bb) { return getRootAsDQNConfigFlat(_bb, new DQNConfigFlat()); }
  public static DQNConfigFlat getRootAsDQNConfigFlat(ByteBuffer _bb, DQNConfigFlat obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DQNConfigFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String agentId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer agentIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer agentIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public float startEpsilon() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float endEpsilon() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float explorationFraction() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public int learningStarts() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int trainFrequency() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int batchSize() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float learningRate() { int o = __offset(18); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public int targetNetworkFrequency() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float gamma() { int o = __offset(22); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public int numInputs() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int numActions() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int hidden1Size() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int hidden2Size() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int totalTimesteps() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int replayBufferSize() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createDQNConfigFlat(FlatBufferBuilder builder,
      int agentIdOffset,
      float startEpsilon,
      float endEpsilon,
      float explorationFraction,
      int learningStarts,
      int trainFrequency,
      int batchSize,
      float learningRate,
      int targetNetworkFrequency,
      float gamma,
      int numInputs,
      int numActions,
      int hidden1Size,
      int hidden2Size,
      int totalTimesteps,
      int replayBufferSize) {
    builder.startTable(16);
    DQNConfigFlat.addReplayBufferSize(builder, replayBufferSize);
    DQNConfigFlat.addTotalTimesteps(builder, totalTimesteps);
    DQNConfigFlat.addHidden2Size(builder, hidden2Size);
    DQNConfigFlat.addHidden1Size(builder, hidden1Size);
    DQNConfigFlat.addNumActions(builder, numActions);
    DQNConfigFlat.addNumInputs(builder, numInputs);
    DQNConfigFlat.addGamma(builder, gamma);
    DQNConfigFlat.addTargetNetworkFrequency(builder, targetNetworkFrequency);
    DQNConfigFlat.addLearningRate(builder, learningRate);
    DQNConfigFlat.addBatchSize(builder, batchSize);
    DQNConfigFlat.addTrainFrequency(builder, trainFrequency);
    DQNConfigFlat.addLearningStarts(builder, learningStarts);
    DQNConfigFlat.addExplorationFraction(builder, explorationFraction);
    DQNConfigFlat.addEndEpsilon(builder, endEpsilon);
    DQNConfigFlat.addStartEpsilon(builder, startEpsilon);
    DQNConfigFlat.addAgentId(builder, agentIdOffset);
    return DQNConfigFlat.endDQNConfigFlat(builder);
  }

  public static void startDQNConfigFlat(FlatBufferBuilder builder) { builder.startTable(16); }
  public static void addAgentId(FlatBufferBuilder builder, int agentIdOffset) { builder.addOffset(0, agentIdOffset, 0); }
  public static void addStartEpsilon(FlatBufferBuilder builder, float startEpsilon) { builder.addFloat(1, startEpsilon, 0.0f); }
  public static void addEndEpsilon(FlatBufferBuilder builder, float endEpsilon) { builder.addFloat(2, endEpsilon, 0.0f); }
  public static void addExplorationFraction(FlatBufferBuilder builder, float explorationFraction) { builder.addFloat(3, explorationFraction, 0.0f); }
  public static void addLearningStarts(FlatBufferBuilder builder, int learningStarts) { builder.addInt(4, learningStarts, 0); }
  public static void addTrainFrequency(FlatBufferBuilder builder, int trainFrequency) { builder.addInt(5, trainFrequency, 0); }
  public static void addBatchSize(FlatBufferBuilder builder, int batchSize) { builder.addInt(6, batchSize, 0); }
  public static void addLearningRate(FlatBufferBuilder builder, float learningRate) { builder.addFloat(7, learningRate, 0.0f); }
  public static void addTargetNetworkFrequency(FlatBufferBuilder builder, int targetNetworkFrequency) { builder.addInt(8, targetNetworkFrequency, 0); }
  public static void addGamma(FlatBufferBuilder builder, float gamma) { builder.addFloat(9, gamma, 0.0f); }
  public static void addNumInputs(FlatBufferBuilder builder, int numInputs) { builder.addInt(10, numInputs, 0); }
  public static void addNumActions(FlatBufferBuilder builder, int numActions) { builder.addInt(11, numActions, 0); }
  public static void addHidden1Size(FlatBufferBuilder builder, int hidden1Size) { builder.addInt(12, hidden1Size, 0); }
  public static void addHidden2Size(FlatBufferBuilder builder, int hidden2Size) { builder.addInt(13, hidden2Size, 0); }
  public static void addTotalTimesteps(FlatBufferBuilder builder, int totalTimesteps) { builder.addInt(14, totalTimesteps, 0); }
  public static void addReplayBufferSize(FlatBufferBuilder builder, int replayBufferSize) { builder.addInt(15, replayBufferSize, 0); }
  public static int endDQNConfigFlat(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DQNConfigFlat get(int j) { return get(new DQNConfigFlat(), j); }
    public DQNConfigFlat get(DQNConfigFlat obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

